{"version":3,"sources":["pages/ProfilePage/CollabrationRequestTable.tsx","pages/ProfilePage/CollabrationInvitationTable.tsx","pages/ProfilePage/PapersModal.tsx","pages/ProfilePage/ProfilePage.tsx","pages/ProfilePage/index.tsx"],"names":["collabrationService","getApiService","CollabrationService","CollabrationRequestTable","props","react_default","a","createElement","Query","call","Promise","all","requestIds","map","id","getCollabrationRequestInfo","data","loading","_","columns","title","dataIndex","key","render","text","record","es","to","concat","paperId","onClick","acceptCollabrationRequest","collabrationRequestId","then","refetch","table","dataSource","CollabrationInvitationTable","invitationIds","getCollabrationInvitationInfo","acceptCollabrationInvitation","collabrationInvitationId","paperService","PaperService","PaperModal","modal","visible","show","onCancel","close","onOk","paperIds","getPaper","list","pagination","pageSize","renderItem","item","PaperListItem","paper","DescriptionItem","descriptions","Item","Title","styled","h4","withConfig","displayName","componentId","ProfilePage","userInfo","_useState","useState","_useState2","Object","slicedToArray","uploadModalShow","setUploadModalShow","_useState3","_useState4","collabrationModalShow","setCollabrationModalShow","bordered","label","userId","username","role","length","paperIdsInCollabration","score","PapersModal","ProfilePage_CollabrationRequestTable","collabrationRequestIds","ProfilePage_CollabrationInvitationTable","collabrationInvitationIds","Container","div","Profile","content","userStore","useStore","UserStore","state","loggedIn","UserService","getUserInfo","user","Loading","pages_ProfilePage_ProfilePage","FunctionLayout"],"mappings":"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","file":"static/js/17.fcfd5933.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { getApiService } from \"../../apis\";\r\nimport { CollabrationService } from \"../../apis/collabration/CollabrationService\";\r\nimport Query from \"../../apis/Query\";\r\nimport { Table } from \"antd\";\r\nimport { Link } from \"@reach/router\";\r\n\r\ninterface Props {\r\n  requestIds: string[];\r\n  refetch(): void;\r\n}\r\n\r\nconst collabrationService = getApiService(CollabrationService);\r\n\r\n\r\n\r\nconst CollabrationRequestTable: React.FC<Props> = (props) => {\r\n\r\n  return (\r\n    <Query call={() => Promise.all(props.requestIds.map((id) => (\r\n      collabrationService.getCollabrationRequestInfo(id)\r\n    )))}>\r\n      {(data, loading, _) => {\r\n\r\n\r\n        const columns = [\r\n          { title: \"请求ID\", dataIndex: \"collabrationRequestId\", key: \"collabrationRequestId\" },\r\n          { title: \"时间\", dataIndex: \"time\", key: \"time\" },\r\n          { title: \"请求者\", dataIndex: \"requesterId\", key: \"requesterId\" },\r\n          {\r\n            title: \"文章ID\", key: \"paperId\", render: (text, record) => (\r\n              <Link key=\"paperId\" to={`/papers/${record.paperId}`}>{record.paperId}</Link>\r\n            )\r\n          },\r\n          {\r\n            title: \"操作\", key: \"actions\", render: (text, record) => {\r\n              return (\r\n                <a key={\"accept\"} onClick={() => {\r\n                  collabrationService.acceptCollabrationRequest(record.collabrationRequestId).then(() => {\r\n                    props.refetch();\r\n                  });\r\n                }}>接受</a>\r\n              )\r\n\r\n            }\r\n          }\r\n        ];\r\n\r\n        return (\r\n          <Table\r\n            dataSource={data || []}\r\n            loading={loading}\r\n            columns={columns}\r\n          />\r\n        );\r\n      }}\r\n    </Query>\r\n  )\r\n};\r\n\r\nexport default CollabrationRequestTable;\r\n","import React from \"react\";\r\nimport { getApiService } from \"../../apis\";\r\nimport { CollabrationService } from \"../../apis/collabration/CollabrationService\";\r\nimport Query from \"../../apis/Query\";\r\nimport { Table } from \"antd\";\r\nimport { Link } from \"@reach/router\";\r\n\r\ninterface Props {\r\n  invitationIds: string[];\r\n  refetch(): void;\r\n}\r\n\r\nconst collabrationService = getApiService(CollabrationService);\r\n\r\nconst CollabrationInvitationTable: React.FC<Props> = (props) => {\r\n\r\n  return (\r\n    <Query call={() => Promise.all(props.invitationIds.map((id) => (\r\n      collabrationService.getCollabrationInvitationInfo(id)\r\n    )))}>\r\n      {(data, loading, _) => {\r\n\r\n\r\n        const columns = [\r\n          { title: \"邀请ID\", dataIndex: \"collabrationInvitationId\", key: \"collabrationInvitationId\" },\r\n          { title: \"时间\", dataIndex: \"time\", key: \"time\" },\r\n          { title: \"邀请者\", dataIndex: \"inviterId\", key: \"inviterId\" },\r\n          {\r\n            title: \"文章ID\", key: \"paperId\", render: (text, record) => (\r\n              <Link key=\"paperId\" to={`/papers/${record.paperId}`}>{record.paperId}</Link>\r\n            )\r\n          },\r\n          {\r\n            title: \"操作\", key: \"actions\", render: (text, record) => {\r\n              return (\r\n                <a onClick={() => {\r\n                  collabrationService.acceptCollabrationInvitation(record.collabrationInvitationId).then(() => {\r\n                    props.refetch();\r\n                  });\r\n                }}>接受</a>\r\n              )\r\n\r\n            }\r\n          }\r\n        ];\r\n\r\n        return (\r\n          <Table\r\n            dataSource={data || []}\r\n            loading={loading}\r\n            columns={columns}\r\n          />\r\n        );\r\n      }}\r\n    </Query>\r\n  )\r\n  return <div />;\r\n};\r\n\r\nexport default CollabrationInvitationTable;\r\n","import React from \"react\";\r\nimport { Modal, List } from \"antd\";\r\nimport Query from \"../../apis/Query\";\r\nimport { getApiService } from \"../../apis\";\r\nimport { PaperService } from \"../../apis/paper/PaperService\";\r\nimport PaperListItem from \"../../components/PaperList/PaperListItem\";\r\nimport { PaperInfo } from \"../../models/paper\";\r\n\r\ninterface Props {\r\n  title: React.ReactNode;\r\n  paperIds: string[];\r\n  show: boolean;\r\n  close(): void;\r\n}\r\n\r\nconst paperService = getApiService(PaperService);\r\n\r\nconst PaperModal: React.FC<Props> = (props) => {\r\n  return (\r\n    <Modal visible={props.show} title={props.title} onCancel={props.close} onOk={props.close}>\r\n      <Query call={() => Promise.all(props.paperIds.map((id) => paperService.getPaper(id)))}>\r\n        {(data, loading) => (\r\n          <List\r\n            dataSource={data}\r\n            pagination={{ pageSize: 5 }}\r\n            loading={loading}\r\n            renderItem={(item) => <PaperListItem item={item.paper} />}\r\n          />\r\n        )}\r\n      </Query>\r\n\r\n    </Modal >\r\n  )\r\n};\r\n\r\nexport default PaperModal;\r\n","import React, { useState, useCallback } from \"react\";\r\nimport { UserInfo } from \"../../models/user\";\r\nimport { Statistic, Row, Col, Descriptions } from \"antd\";\r\nimport styled from \"styled-components\";\r\nimport CollabrationRequestTable from \"./CollabrationRequestTable\";\r\nimport CollabrationInvitationTable from \"./CollabrationInvitationTable\";\r\nimport PaperModal from \"./PapersModal\";\r\n\r\nconst DescriptionItem = Descriptions.Item;\r\n\r\ninterface Props {\r\n  userInfo: UserInfo;\r\n  refetch(): void;\r\n}\r\n\r\nconst Title = styled.h4`\r\nmargin: 20px 0;\r\n    color: rgba(0, 0, 0, 0.85);\r\n    font-weight: bold;\r\n    font-size: 16px;\r\n    line-height: 1.5;\r\n`;\r\n\r\nconst ProfilePage: React.FC<Props> = (props) => {\r\n  const { userInfo } = props;\r\n  const [uploadModalShow, setUploadModalShow] = useState(false);\r\n  const [collabrationModalShow, setCollabrationModalShow] = useState(false);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n\r\n        <Descriptions title=\"用户信息\" bordered>\r\n          <DescriptionItem label=\"用户ID\"><span>{userInfo.userId}</span></DescriptionItem>\r\n          <DescriptionItem label=\"用户名\"><span>{userInfo.username}</span></DescriptionItem>\r\n\r\n          <DescriptionItem label=\"角色\"><span>{userInfo.role}</span></DescriptionItem>\r\n          <DescriptionItem label=\"上传论文数\">\r\n            <a onClick={() => setUploadModalShow(true)}>\r\n              {userInfo.paperIds.length}\r\n            </a>\r\n          </DescriptionItem>\r\n          <DescriptionItem label=\"参与论文数\">\r\n            <a onClick={() => setCollabrationModalShow(true)}>\r\n              {userInfo.paperIdsInCollabration.length}\r\n            </a>\r\n          </DescriptionItem>\r\n          <DescriptionItem label=\"评分\"><span>{userInfo.score}</span></DescriptionItem>\r\n\r\n        </Descriptions>\r\n        <PaperModal title=\"我上传的论文\" paperIds={userInfo.paperIds} show={uploadModalShow} close={() => setUploadModalShow(false)} />\r\n        <PaperModal title=\"我参与的论文\" paperIds={userInfo.paperIdsInCollabration} show={collabrationModalShow} close={() => setCollabrationModalShow(false)} />\r\n\r\n      </div>\r\n\r\n      <div>\r\n        <Title>\r\n          我收到的合作请求\r\n        </Title>\r\n        <CollabrationRequestTable refetch={props.refetch} requestIds={userInfo.collabrationRequestIds} />\r\n      </div>\r\n      <div>\r\n        <Title>\r\n          我收到的合作邀请\r\n        </Title>\r\n        <CollabrationInvitationTable refetch={props.refetch} invitationIds={userInfo.collabrationInvitationIds} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfilePage;\r\n","import React from \"react\";\r\nimport { RouteComponentProps } from \"@reach/router\";\r\nimport { useStore } from \"simstate\";\r\nimport styled from \"styled-components\";\r\nimport { Statistic } from \"antd\";\r\nimport ProfilePage from \"./ProfilePage\";\r\nimport { UserStore } from \"../../stores/UserStore\";\r\nimport { getApiService } from \"../../apis\";\r\nimport { UserService } from \"../../apis/user/UserService\";\r\nimport Query from \"../../apis/Query\";\r\nimport Loading from \"../../components/Loading\";\r\nimport FunctionLayout from \"../../layouts/FunctionLayout\";\r\n\r\nconst Container = styled.div`\r\n  max-width: 1000px;\r\n\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst Profile: React.FC<RouteComponentProps> = (props) => {\r\n  const userStore = useStore(UserStore);\r\n\r\n  let content;\r\n\r\n  if (!userStore.state.loggedIn) {\r\n    content = \"请登录！\";\r\n  } else {\r\n    content = (\r\n      <Query call={() => getApiService(UserService).getUserInfo(userStore.state.user!!.username)}>\r\n        {(data, loading, _, refetch) => {\r\n          if (loading) {\r\n            return <Loading />;\r\n          }\r\n\r\n          return (\r\n            <ProfilePage refetch={refetch} userInfo={data} />\r\n          );\r\n        }}\r\n      </Query>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <FunctionLayout>\r\n      <Container>\r\n        {content}\r\n      </Container>\r\n    </FunctionLayout>\r\n  )\r\n};\r\n\r\nexport default Profile;\r\n"],"sourceRoot":""}